window.addEventListener("load", () => {
    // The API Key provided is restricted to JSFiddle website
    // Get your own API Key on https://myprojects.geoapify.com
    const myAPIKey = "";

    const autocompleteInput = new autocomplete.GeocoderAutocomplete(
        document.getElementById("autocomplete"),
        myAPIKey, {
            lang: 'en',
            allowNonVerifiedHouseNumber: true,
            allowNonVerifiedStreet: true,
            skipDetails: true
        });

    let selectedLocation;
    let locationNeedToBeClarified;
    let suggestedLocation;
    let locationMarker;

    autocompleteInput.on('select', (location) => {
        selectLocation(location);
    });

    function selectLocation(location) {
        cleanUp();

        // check selected location here
        selectedLocation = location;

        if (location) {
            locationNeedToBeClarified = (location.properties.nonVerifiedParts && location.properties.nonVerifiedParts.length) || !location.properties.housenumber;
        }

        updateAddressInfo();
    }

    function cleanUp() {
        if (locationMarker) {
            locationMarker.remove();
            locationMarker = null;
        }

        locationNeedToBeClarified = false;
        suggestedLocation = false;
    }


    // add a marker with icon generated by Geoapify Marker Icon API
    // https://apidocs.geoapify.com/playground/icon/
    const markerWarningIcon = L.icon({
        iconUrl: `https://api.geoapify.com/v1/icon/?type=awesome&color=%23ffd14e&size=large&icon=question&noWhiteCircle&scaleFactor=2&apiKey=${myAPIKey}`,
        iconSize: [38, 56], // size of the icon
        iconAnchor: [18, 51], // point of the icon which will correspond to marker's location
        popupAnchor: [0, -57] // point from which the popup should open relative to the iconAnchor
    });

    const markerOkIcon = L.icon({
        iconUrl: `https://api.geoapify.com/v1/icon/?type=awesome&color=%2330e970&size=large&icon=check&noWhiteCircle&scaleFactor=2&apiKey=${myAPIKey}`,
        iconSize: [38, 56], // size of the icon
        iconAnchor: [18, 51], // point of the icon which will correspond to marker's location
        popupAnchor: [0, -57] // point from which the popup should open relative to the iconAnchor
    });

    function updateAddressInfo() {
        const infoRow = document.getElementById("info");
        const warningInfoRow = document.getElementById("warning-info");
        const acceptLocationRow = document.getElementById("accept-location");
        const acceptAddressRow = document.getElementById("accept-address");

        const newAddress = document.getElementById("new-address");

        let toHide = [infoRow, warningInfoRow, acceptLocationRow, acceptAddressRow];
        let toShow = [];

        if (!location) {
            toHide = [warningInfoRow, acceptLocationRow, acceptAddressRow];
            toShow = [infoRow];
        } else if (location && !locationNeedToBeClarified) {
            toHide = [infoRow, warningInfoRow, acceptLocationRow, acceptAddressRow];
        } else if (location && locationNeedToBeClarified && !suggestedLocation) {
            toHide = [infoRow, acceptLocationRow, acceptAddressRow];
            toShow = [warningInfoRow];
        } else if (location && locationNeedToBeClarified && suggestedLocation && suggestedLocation.properties.distance === 0) {
            toHide = [infoRow, acceptLocationRow];
            toShow = [warningInfoRow, acceptAddressRow];

            newAddress.textContent = suggestedLocation.properties.formatted;
        } else if (location && locationNeedToBeClarified && suggestedLocation && suggestedLocation.properties.distance > 0) {
            toHide = [infoRow, acceptAddressRow];
            toShow = [warningInfoRow, acceptLocationRow];
        }

        toHide.forEach(element => element.classList.add("hidden"));
        toShow.forEach(element => element.classList.remove("hidden"));
    }

    function getAddressByLatLon(lat, lon) {
        return fetch(`https://api.geoapify.com/v1/geocode/reverse?lat=${lat}&lon=${lon}&apiKey=${myAPIKey}`).then(result => result.json()).then(result => {
            if (result && result.features && result.features.length) {
                return result.features[0];
            }

            return null;
        });
    }

    function acceptLocation() {
        selectedLocation.properties.original_lon = selectedLocation.properties.lon;
        selectedLocation.properties.lon = locationMarker.getLatLng().lng;

        selectedLocation.properties.original_lat = selectedLocation.properties.lat;
        selectedLocation.properties.lat = locationMarker.getLatLng().lng;

        locationNeedToBeClarified = false;
        suggestedLocation = null;
        locationMarker.setIcon(markerOkIcon);
        locationMarker.dragging.disable();

        updateAddressInfo();
    }

    function acceptAddress() {
        autocompleteInput.setValue(suggestedLocation.properties.formatted);
        selectedLocation = suggestedLocation;
        locationNeedToBeClarified = false;
        suggestedLocation = null;
        locationMarker.setIcon(markerOkIcon);
        locationMarker.dragging.disable();

        updateAddressInfo();
    }

});